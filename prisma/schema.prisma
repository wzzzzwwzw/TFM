generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image    String?
  accounts Account[]
  sessions Session[]
  games         Game[] 
}

enum GameType{
  mcq
  open_ended
}

model Game{
  id String @id @default(cuid())
  userId String
  timeStarted DateTime
  topic String
  timeEnded DateTime?
  gameType GameType
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions Question[]

  @@index([userId], name: "userId")
}

model Question {
  id String @id @default (cuid())
  question String
  answer String
  gameId String
  options Json? // for mcq questions
  percentageCorrect Float? // for open ended questions
  isCorrect Boolean? // for mcq questions
  questionType GameType
  userAnswer String?

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId], name: "gameId")
}
model Quiz {
  id         Int           @id @default(autoincrement())
  title      String
  category   String
  difficulty String
  questions  QuizQuestion[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model QuizQuestion {
  id        Int    @id @default(autoincrement())
  quizId    Int
  text      String
  answer    String
  Quiz      Quiz   @relation(fields: [quizId], references: [id])
}

model topicCount {
  id    String @id @default(cuid())
  topic String @unique
  count Int
}

model AdminQuiz {
  id          String           @id @default(uuid())
  title       String
  category    String
  difficulty  String
  status      String           @default("pending") // e.g. "pending", "approved", "rejected"
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  questions   AdminQuizQuestion[]
}

model AdminQuizQuestion {
  id        String   @id @default(uuid())
  quizId    String
  quiz      AdminQuiz @relation(fields: [quizId], references: [id])
  question  String
  answer    String
  // Optionally: type, options, etc.
}

model UserQuizAttempt {
  id         String   @id @default(uuid())
  userId     String
  quizId     String
  quizTitle  String
  answers    Json
  score      Float
  createdAt  DateTime @default(now())
}